<br/> = For example, <code>invalid('Incorrect parameter')</code> corresponds to the message sent in case of an invalid parameter for the report execution.
IDX_REPORT_GROUP_UNIQ_TITLE = 具有相同标题的报告组已经存在
IDX_REPORT_REPORT_UNIQ_NAME = 具有相同名称的报告已经存在
actions.Report = 报表
actions.printAll = 全部打印
actions.printSelected = 打印选择项
bandDefinitionEditor = 集合编辑
button.import = 导入
button.run = 运行
caption.category = 分类
caption.preview = 预览
chartEdit.series = Series
chartEdit.seriesEmptyMsg = Please specify series
chartEdit.seriesTypeNullMsg = Please specify type for series
chartEdit.seriesValueFieldNullMsg = Please specify value field for series
copy = 复制
crossFieldValidationScriptHelp =   Here you can set a Groovy-script that will cross validate the report parameters before report execution.<br/> The method <code>invalid (String str)</ code> may be used for sending messages about the report validation errors to the user.<br/> The script should check whether or not parameters values make sense in relation to each other and call the "invalid()" method if they do not.<br/><br/> For example, <code>invalid('Start date has to be before end date')</code> corresponds to the message sent in case if "Start date" parameter happens to be after "End date" parameter. <br/>The following variables are passed into the script:<ul><li><code>params</code> - external report parameters map</li><li><code>dataManager</code> - an object of the <code>DataManager</code> type that provides CRUD functionality</li><li><code>metadata</code> - an object of the <code>Metadata</code> type that provides access the application metadata</li><li><code>security</code> - an object of the <code>Security</code> type used to check user access rights to different<br>objects in the system</li><li><code>userSession</code> - an object of the <code>UserSession</code> type associated with the currently<br>authenticated user</li><li><code>invalid</code> - groovy closure which effectively fails validation if called from inside the script<ul>
dataSet.cantFindCollectionProperty = Can`t find collection property %s for entity %s
dataSet.dataStore = Data store
dataSet.dataStoreMain = Main
dataSet.editView = 选择实体属性
dataSet.entitiesParamName = 实体列表参数名称
dataSet.entityAliasInvalid = 名称为[%s]的参数不正确
dataSet.entityAliasNull = 参数是空的
dataSet.entityParamName = 实体参数名称
dataSet.entityWasChanged = 实体被改变了。现在您正在编辑新实体 %s 的可用字段
dataSet.jsonParameter = 参数
dataSet.jsonPathQuery = JsonPath查询语句
dataSet.jsonPathQueryHelp = Here you can set JsonPath query to query the JSON tree.<p>Example:</p>Having the following JSON structure, we can select all books with the the query <strong>$.store.book[*]</strong><br><code>{<br>&nbsp "store": {<br>&nbsp &nbsp "book": [<br>&nbsp &nbsp &nbsp {<br>&nbsp &nbsp &nbsp &nbsp "category": "reference",<br>&nbsp &nbsp &nbsp &nbsp "author": "Nigel Rees",<br>&nbsp &nbsp &nbsp &nbsp "title": "Sayings of the Century",<br>&nbsp &nbsp &nbsp &nbsp "price": 8.95<br>&nbsp &nbsp &nbsp },<br>&nbsp &nbsp &nbsp {<br>&nbsp &nbsp &nbsp &nbsp "category": "fiction",<br>&nbsp &nbsp &nbsp &nbsp "author": "Evelyn Waugh",<br>&nbsp &nbsp &nbsp &nbsp "title": "Sword of Honour",<br>&nbsp &nbsp &nbsp &nbsp "price": 12.99,<br>&nbsp &nbsp &nbsp &nbsp "isbn": "0-553-21311-3"<br>&nbsp &nbsp &nbsp }<br>&nbsp &nbsp ],<br>&nbsp &nbsp "bicycle": {<br>&nbsp &nbsp &nbsp "color": "red",<br>&nbsp &nbsp &nbsp "price": 19.95<br>&nbsp &nbsp }<br>&nbsp }<br>}<br></code><br>For more sophisticated examples please refer for JsonPath documentation.
dataSet.jsonPathQueryText =JsonPath查询语句是必需的
dataSet.jsonSourceTextHelp = Here you can set a Groovy script that will return the string containing json. The following variables are passed into the script:<ul><li><code>params</code> - external report parameters map</li><li><code>parentBand</code> - parent band as an object of the <code>BandData</code> type</li><li><code>persistence</code> - an object of the <code>Persistence</code> type that provides access to the data storage</li><li><code>dataManager</code> - an object of the <code>DataManager</code> type that provides CRUD functionality</li><li><code>metadata</code> - an object of the <code>Metadata</code> type that provides access the application metadata</li><li><code>security</code> - an object of the <code>Security</code> type used to check user access rights to different<br>objects in the system</li><li><code>userSession</code> - an object of the <code>UserSession</code> type associated with the currently<br>authenticated user</li><li><code>userSessionSource</code> - an object of the <code>UserSessionSource</code> type which is used to obtain</br>current user session object</li><li><code>timeSource</code> - an object of the <code>TimeSource</code> type used to obtain the current time</li><li><code>transactional</code> - a method that takes a closure, which should be executed in a new transaction,<br>as parameter. The current <code>EntityManager</code> becomes the closure parameter</li><ul>
dataSet.jsonSourceType = Json source
dataSet.linkParameterName = Link field
dataSet.name = 数据集名称
dataSet.processTemplate = Preprocess query as Groovy template
dataSet.text = Script
dataSet.textHelp = Here you can set a Groovy script that will produce the dataset. The following variables are passed into the script:<ul><li><code>params</code> - external report parameters map</li><li><code>parentBand</code> - parent band as an object of the <code>BandData</code> type</li><li><code>persistence</code> - an object of the <code>Persistence</code> type that provides access to the data storage</li><li><code>dataManager</code> - an object of the <code>DataManager</code> type that provides CRUD functionality</li><li><code>metadata</code> - an object of the <code>Metadata</code> type that provides access the application metadata</li><li><code>security</code> - an object of the <code>Security</code> type used to check user access rights to different<br>objects in the system</li><li><code>userSession</code> - an object of the <code>UserSession</code> type associated with the currently<br>authenticated user</li><li><code>userSessionSource</code> - an object of the <code>UserSessionSource</code> type which is used to obtain</br>current user session object</li><li><code>timeSource</code> - an object of the <code>TimeSource</code> type used to obtain the current time</li><li><code>transactional</code> - a method that takes a closure, which should be executed in a new transaction,<br>as parameter. The current <code>EntityManager</code> becomes the closure parameter</li><ul>
dataSet.type = 数据集类型
dataSet.urlJsonSource = URL
dataSet.urlJsonSourceMessage = URL is required
dataSet.useExistingView = Use existing view
dataSet.viewName = 视图名称
definition.name = 集合名
definition.orientation = 方向
definition.parentBand = 父集合
description.createBand = 创建集合
description.createDataSet = Create data set
description.createTemplate = Create template
description.downloadTemplate = Download template
description.editTemplate = 修改模板
description.moveDown = 下移
description.moveUp = 上移
description.removeBand = 删除集合
description.removeDataSet = Remove data set
description.uploadTemplate = Upload template
error.bandNameNull = 没有设置集合名
error.bandNamesDuplicated = 集合名重复 [%s]
error.bandOrientationNull = 集合 [%s] 方向未设置
error.dataSetNameNull = Data set name is not set
error.dataSetScriptNull = Data set's [%s] script is empty
error.dataSetTypeNull = Data set's [%s] type is not set
error.jsonDataSetScriptNull = Json data set's [%s] script is empty
error.rootBandNull = 父集合未设置
export = 导出
fileUploadDialog.caption = Sending the file
formatStringMsg = Format string isn't specified
formatsEdit = 格式
generalFrame.createBandDefinition = 创建集合
generalFrame.down = 下移
generalFrame.removeBandDefinition = 删除集合
generalFrame.up = 上移
generalTab = 报表结构
groupLocaleCaption = 国际化
groupProperties = 分组
inputOutputTypesError = 模板类型与输出类型不匹配
inputParameters = 输入实体参数
localeCaption = 国际化名称
localesTab = 国际化
menu-config.report$Report.browse = 报表
menu-config.report$Report.run = 运行报表
menu-config.report$ReportGroup.browse = 报表分组
menu-config.report$showChart = 显示图表
menu-config.report$showReportTable = 显示报表表格
menu-config.reports = 报表
notification.defaultTemplateIsEmpty = Default template isn't specified
notification.fileIsNotAllowedForChart = Unable to save template file for chart 
notification.selectReport = Please select a report
notifications.confirmPrintAll = Are you sure you want to print all the data?
notifications.confirmPrintAllheader = Confirmation
notifications.confirmPrintSelected = Which data should be used for report?
notifications.confirmPrintSelectedheader = Select
notifications.noSelectedEntity = No data selected
parameterEditor = Parameter editor
parameters.alias = 参数别名
parameters.aliasMsg = 参数别名未设置
parameters.caption = 标题
parameters.crossFieldValidate = 校验
parameters.defaultDateIsCurrent = Default date(time)\nis current
parameters.defaultValue = 默认值
parameters.enum = Enumeration
parameters.groovyScript = Groovy script
parameters.hidden = Hidden
parameters.localesTab = Localization
parameters.metaClass = Entity
parameters.nameMsg = Parameter name isn't specified
parameters.optionsTab = Properties
parameters.predefinedTransformation = Predefined transformation
parameters.required = 必需参数?
parameters.requiredEnumClass = Parameter enumeration isn't specified
parameters.requiredMetaClass = Parameter entity isn't specified
parameters.screen = Entity selection screen
parameters.transformationTab = Transformation
parameters.type = 参数类型
parameters.typeMsg = 参数类型未指定
parameters.validateFields = 校验
parameters.validationTab = 校验
parameters.wildcards = 通配符
parametersAndFormatsTab = 参数与格式
report.bandDetails = 集合详情
report.bands = 报表集合
report.crossParametersValidation = 交叉参数校验
report.defaultTemplate = 设为默认
report.nameMsg = 报表名称未设置
report.new = 新建
report.parameters = 参数
report.reportClearButton = 清除
report.reportFilterButton = 查询
report.reportRunFilterCode = 编码
report.reportRunFilterGroup = 分组
report.reportRunFilterName = 名称
report.reportRunFilterUpdatedDate = 修改迟于
report.reportTypeMsg = Report type isn't specified
report.templateMsg = Default template isn't specified
report.templates = 模板
report.validationScriptOff = 校验脚本
report.validationScriptOn = 校验脚本已启用
report.valuesFormats = 值格式
report.wizard = 使用向导
reportBrowser = 报表
reportEditor = 报表编辑
reportEditor.format = 编辑报表 "%s"
reportException.failedConnectToOffice = Couldn't find OpenOffice instance
reportException.message = An error occurred while generating report
reportException.noFile = File was not uploaded
reportException.noOpenOfficeFreePorts = Couldn't connect to OpenOffice instance. No free ports available.
reportException.unableToImportReport = Unable to import reports
reportException.wrongFileType = Wrong file type: %s. Expecting ZIP.
reportGroupBrowser = 报表分组
reportGroupEditor = 报表分组
roles.addRole = 添加角色
roles.removeRole = 删除角色
roles.roleName = 角色名
runReport = 运行
runReportBackgroundMessage = Please wait while the report document is being generated
runReportBackgroundTitle = 正在运行报表
screens.createScreen = 添加界面
screens.removeScreen = 删除界面
screens.screenId = 界面ID
securityFrame.roles = 角色
securityFrame.screens = 界面
securityTab = 角色与界面
template.alterable = 可修改
template.code = 模板编码
template.codeMsg = 请输入模板编码
template.customDefinedBy = 创建人
template.customDefinition = 自定义
template.file = 模板文件
template.isAlterableOutput = 可变输出
template.isCustom = 自定义
template.outputNamePattern = 输出名称模式
template.outputType = 输出类型
template.outputTypeMsg = 请指定输出类型
template.uploadTemplate = 请上传模板文件
templateEditor = 模板编辑
templateEditor.HighlightActiveLine = 高亮活动线
templateEditor.PrintMargin = 打印边距
templateEditor.ShowGutter = 显示甘特图
templateEditor.classRequired = 请指定自定义
templateEditor.customDefinedBy = 请指定自定义类型
templateEditor.uploadSuccess = 文件已上传
templateEditor.uploadUnsuccess = 文件未上传
templatesTab = 模板
unableToDeleteNotEmptyReportGroup = 无法删除带有报表的组
unableToDeleteSystemReportGroup = 无法删除系统组报告
unableToSaveTemplateWhichDefinedWithClass = 无法保存与类定义的模板
validationScript = 验证脚本
validationScriptHelp =   在这里你可以设置一个脚本，将检查报告的参数值。<br/>方法<code>invalid (String str)</ code>可用于发送的报告验证错误的用户信息。<br/>脚本应该检查参数值，如果该值无效调用“invalid()“方法。<br /> <br />例如，<code>invalid('Incorrect parameter')</code>报表执行无效参数的情况下发送消息。<br/>以下变量传递给脚本：<ul><li><code>value</code>参数值由用户输入<li><code>dataManager</code> -一个<code>DataManager</code>类型提供的CRUD功能的对象 ，</li><li><code>metadata</code> 一个<code>Metadata</code>提供访问应用程序的元数据的对象</li><li><code>security</code>一个<code>Security</code>用于检查用户的访问权限不同的对象<br>系统对象</li><li><code>userSession</code> 关联当前<br>已登录用户对象</li><li><code>invalid</code>- Groovy闭包有效验证失败如果被从里面的脚本<ul>
valueNameMsg = 值名称未设置
valuesFormats.format = 格式化字符串
valuesFormats.name = 值名称
com.haulmont.reports.gui.report.importdialog/importResult = 导入成功完成。创建报告%s，更新%s
com.haulmont.reports.gui.report.importdialog/importRoles = 导入角色
com.haulmont.reports.gui.report.importdialog/reportImportDialog.caption = 导入报告
com.haulmont.reports.gui.report.importdialog/uploadDescription = 选择一个文件或将其拖放到这里
com.haulmont.reports.gui.report.run/caption.reportForChart = 报表图表
com.haulmont.reports.gui.report.run/caption.reportForTable = 报表表格
com.haulmont.reports.gui.report.run/caption.reportOutputType = 输出类型
com.haulmont.reports.gui.report.run/caption.reportParameters = 报表参数
com.haulmont.reports.gui.report.run/caption.reportTemplate = 模板
com.haulmont.reports.gui.report.run/error.paramIsRequiredButEmpty = 填入参数“%s”
com.haulmont.reports.gui.report.run/input.printReport = 运行报告
com.haulmont.reports.gui.report.run/input.requiredParametersNotSet = 未定义必需参数
com.haulmont.reports.gui.report.run/inputParameters = 输入参数并运行报告
com.haulmont.reports.gui.report.run/name = 名称
com.haulmont.reports.gui.report.run/reportBrowser = 运行报表
com.haulmont.reports.gui.report.run/runReport = 运行
com.haulmont.reports.gui.report.run/showChart.caption = 图表报表
com.haulmont.reports.gui.report.run/showReportTable.caption = 显示报表表格
com.haulmont.reports.gui.report.validators/fillCorrectOutputFileNameMsg = 请输入正确的文件扩展名为“%s”
com.haulmont.reports.gui.report.validators/incorrectBandName = 集合名称应该只包含字母、数字和下划线符号。
com.haulmont.reports.gui.report.validators/incorrectInputData = 参数“%s”无效
com.haulmont.reports.gui.report.validators/incorrectParamAlias = 别名应该只包含字母、数字和下划线符号
com.haulmont.reports.gui.report.validators/notOnlyUnderscore = 别名不应该只包含下划线符号
com.haulmont.reports.gui.report.wizard/add = 添加
com.haulmont.reports.gui.report.wizard/addPropertiesAndTableAreas = 向报表中添加简单区域或表区域
com.haulmont.reports.gui.report.wizard/addRegion = 添加区域
com.haulmont.reports.gui.report.wizard/addRegionsWarn = 在报告中至少添加一个区域
com.haulmont.reports.gui.report.wizard/attributes = 属性
com.haulmont.reports.gui.report.wizard/backward = 返回
com.haulmont.reports.gui.report.wizard/cancel = 取消
com.haulmont.reports.gui.report.wizard/changeQuery = 更改查询
com.haulmont.reports.gui.report.wizard/confirmSaveWithoutRegions = 报表没有任何区域。你想保存它吗？
com.haulmont.reports.gui.report.wizard/defaultQueryHasBeenSet = 设置了一个无条件的查询（选择所有实体）
com.haulmont.reports.gui.report.wizard/deleteRegion = 删除区域%s吗？
com.haulmont.reports.gui.report.wizard/diagramType = 图类型
com.haulmont.reports.gui.report.wizard/downloadOutputFileNamePattern = 实体“%s”的报告。%s
com.haulmont.reports.gui.report.wizard/downloadTemplateFile = 模板
com.haulmont.reports.gui.report.wizard/downloadTemplateFileNamePattern = 报表“%s”的模板。%s
com.haulmont.reports.gui.report.wizard/elementsAlreadyAdded = 属性已经添加
com.haulmont.reports.gui.report.wizard/elementsWasNotAdded = 属性未添加…
com.haulmont.reports.gui.report.wizard/enterMainParameters = 输入主要参数
com.haulmont.reports.gui.report.wizard/entity = 实体对象
com.haulmont.reports.gui.report.wizard/entityHintMsg = 报告接受的对象类型
com.haulmont.reports.gui.report.wizard/fillEntityMsg = 请选择“实体”
com.haulmont.reports.gui.report.wizard/fillReportNameMsg = 请输入“报告名称”
com.haulmont.reports.gui.report.wizard/fillReportQuery = 请设置报表查询
com.haulmont.reports.gui.report.wizard/fillTemplateTypeMsg = 请选择“模板文件格式”
com.haulmont.reports.gui.report.wizard/finishPrepareReport = 完成后，您将能够在“报告”屏幕上找到报告。
com.haulmont.reports.gui.report.wizard/forward = 下一步
com.haulmont.reports.gui.report.wizard/interruptConfirm = 你想中断和放弃未保存的更改？
com.haulmont.reports.gui.report.wizard/listOfEntitiesReport = 实体列表报表
com.haulmont.reports.gui.report.wizard/listOfEntitiesReportWithQuery = 实体列表报表, 定义查询语句
com.haulmont.reports.gui.report.wizard/multiEntityDataSetViewEditor = 为数据集选择属性
com.haulmont.reports.gui.report.wizard/outputFileFormat = 报表输出类型
com.haulmont.reports.gui.report.wizard/outputFileName = 输出文件名
com.haulmont.reports.gui.report.wizard/outputFileNameHintMsg = 报表生成的文件的默认名称。
com.haulmont.reports.gui.report.wizard/outputFileTypeHintMsg = 报告生成的文件类型
com.haulmont.reports.gui.report.wizard/properties = 已选择属性
com.haulmont.reports.gui.report.wizard/region = Region
com.haulmont.reports.gui.report.wizard/regionEditor = 选择报表区域的属性
com.haulmont.reports.gui.report.wizard/regionTabulatedMessage = 报表表示具有选定属性的“%s”实体列表。
com.haulmont.reports.gui.report.wizard/regionsClearConfirm = 报告区域将被清除. 继续吗?
com.haulmont.reports.gui.report.wizard/reportBuildType = 报表类型
com.haulmont.reports.gui.report.wizard/reportDetails = 创建报表
com.haulmont.reports.gui.report.wizard/reportName = 报表名称
com.haulmont.reports.gui.report.wizard/reportNameChanged = 报告名称已更改
com.haulmont.reports.gui.report.wizard/reportNamePattern = 实体“%s”的报告
com.haulmont.reports.gui.report.wizard/reportRegions = 生成报告
com.haulmont.reports.gui.report.wizard/reportRegionsColumn = 报告区域
com.haulmont.reports.gui.report.wizard/runReport = 运行
com.haulmont.reports.gui.report.wizard/save = 保存
com.haulmont.reports.gui.report.wizard/saveReport = 保存报告
com.haulmont.reports.gui.report.wizard/selectAtLeastOneProp = 将属性添加到右侧面板以继续
com.haulmont.reports.gui.report.wizard/selectEntityProperties = 选择要包含到报表中的“%s”属性。<br/>对于图表和表，第一个属性值将作为标题使用，<br/>其他属性将作为数据。
com.haulmont.reports.gui.report.wizard/selectEntityPropertiesForTableArea =选择“%s”属性以包含到表区域。<br/>对于图表和表，第一个属性值将作为标题使用，<br/>其他属性将作为数据。
com.haulmont.reports.gui.report.wizard/selectItemForContinue = 选择要继续的项
com.haulmont.reports.gui.report.wizard/selectNotARoot = 选择子项以继续
com.haulmont.reports.gui.report.wizard/selectPropertyFromEntity = 从相关实体中选择属性
com.haulmont.reports.gui.report.wizard/setQuery = 设置查询语句
com.haulmont.reports.gui.report.wizard/simpleRegion = 添加简单区域
com.haulmont.reports.gui.report.wizard/simpleRegionEditor = 为简单报表区域选择属性
com.haulmont.reports.gui.report.wizard/singleEntityDataSetViewEditor = 为数据集选择属性
com.haulmont.reports.gui.report.wizard/singleEntityReport = 单实体报表
com.haulmont.reports.gui.report.wizard/singleMultiEntityHintMsg = <b>报告单实体</b> <p>你可以打印报告从实体或实体编辑浏览器，选择1个实体。<br> <b>报告实体列表</b> <p>你可以打印报告从实体的浏览器，选择实体列表。<br> <b>报告实体列表，查询</b> <p>通过预定义的查询选择所有实体将打印选择。
com.haulmont.reports.gui.report.wizard/stepNo = (步骤 %d / %d)
com.haulmont.reports.gui.report.wizard/tabulatedLookup = 为表格化报表区域选择属性
com.haulmont.reports.gui.report.wizard/tabulatedRegion = 添加列表区
com.haulmont.reports.gui.report.wizard/tabulatedRegionEditor = 选择表格报表区域的属性
com.haulmont.reports.gui.report.wizard/templateFileFormat = 模板类型
com.haulmont.reports.gui.report.wizard/templateGenerationException = 模板生成期间出现错误。
com.haulmont.reports.gui.report.wizard/templateHintMsg = 链接到自动生成的报表模板
com.haulmont.reports.gui.report.wizard/templateTypeHintMsg = 报表模板的类型
com.haulmont.reports.gui.report.wizard/valueNotFound = 没有找到任何东西。
